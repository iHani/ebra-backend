services:
  zookeeper:
    image: bitnami/zookeeper:3.8
    environment:
      ALLOW_ANONYMOUS_LOGIN: 'yes'
      ZOO_LOG_LEVEL: 'FATAL'
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "bash", "-c", "echo ruok | nc localhost 2181 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: wurstmeister/kafka:latest
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKAJS_NO_PARTITIONER_WARNING: 1
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 9092 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 30s


  db:
    image: postgres:15
    env_file:
      - .env.docker
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ebra_db
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "ebra_db"]
      interval: 10s
      timeout: 5s
      retries: 5


  redis:
    image: redis:7
    command: redis-server --loglevel warning
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "bash", "-c", "redis-cli ping | grep PONG"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: .
      dockerfile: Dockerfile
    command:
      - ./scripts/wait-for-kafka.sh
      - npm
      - run
      - dev
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
    env_file:
      - .env.docker
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      KAFKA_BROKER: kafka:9092
      CALLBACK_BASE_URL: http://api:3000/api/v1/callbacks
      AI_PROVIDER_URL: http://api:3000/api/v1/mock-provider

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    command:
      - ./scripts/wait-for-kafka.sh
      - npm
      - run
      - worker
    depends_on:
      api:
        condition: service_started
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - .:/app
      - /app/node_modules
    env_file:
      - .env.docker
    environment:
      KAFKA_BROKER: kafka:9092
      CALLBACK_BASE_URL: http://api:3000/api/v1/callbacks
      AI_PROVIDER_URL: http://api:3000/api/v1/mock-provider
      MAX_CONCURRENT_CALLS: 30

volumes:
  db_data:
